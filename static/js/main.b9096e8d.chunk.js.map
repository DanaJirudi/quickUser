{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","users","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","React","Component","App","onSearchChange","event","searchfield","target","value","_this2","fetch","then","response","json","_this$state","filteredusers","filter","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9096e8d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn(\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt=\"users\" src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\nconst CardList = ({users}) =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\tusers.map((user, i) =>{\r\n\t\t\t\treturn <Card key ={i} id={user.id} name={user.name} email={user.email} />\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\treturn (\r\n\t\t<div className = 'pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\" \r\n\t\t\t\ttype=\"search\" \r\n\t\t\t\tplaceholder=\"Search Users\"\r\n\t\t\t\tonChange = {searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn(\r\n\t\t<div style={{overflowY:'scroll', border:'0.5px solid black', height:'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true});\r\n\t}\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Oops! Something went wrong</h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nclass App extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tusers: [],\r\n\t\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(users => this.setState({users: users}))\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value});\r\n\t}\r\n\r\n\trender(){\r\n\t\t//This destructuring below makes it so we don't have to retype this.state every single time\r\n\t\tconst {users, searchfield} = this.state;\r\n\t\tconst filteredusers = users.filter(user=> {\r\n\t\t\treturn user.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\tif(!users.length){\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t}\r\n\t\treturn(\r\n\t\t\t<div className = \"tc\">\r\n\t\t\t\t<h1 className = \"f2 f1-l fw2 white-90 pv3 mb0 lh-title\">QuickUser</h1>\r\n\t\t\t\t<SearchBox searchChange = {this.onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList users={filteredusers} />\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}